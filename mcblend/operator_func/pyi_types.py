# pylint: disable=missing-function-docstring
'''
Extra types used only in the PYI files.
'''
from typing import Any, Iterator, Literal, TypeVar, Generic, Sized, Optional
from bpy.types import (
    Object, Mesh, Image, Material, Bone, EditBone, MeshUVLoopLayer, PoseBone,
    MeshUVLoop, MeshVertex, MeshEdge, MeshPolygon, TimelineMarker,
    Keyframe, NlaTrack, NlaStrip, Node, NodeSocket, NodeLink, NodeTree,
    NodeSocketInterface)

T = TypeVar("T")

class AnimationDataNlaTracks(Sized):
    '''
    Fake class defined as a result of:
    >>> object.nla_tracks
    '''
    def __getitem__(self, key: Any) -> NlaTrack: ...
    def __iter__(self) -> Iterator[NlaTrack]: ...
    def __len__(self) -> int: ...
    def __contains__(self, key: str) -> bool: ...

class ArmatureDataBones(Sized):
    '''
    Fake class defined as a result of:
    >>> armature.data.bones
    '''
    active: Bone
    def __getitem__(self, key: Any) -> Bone: ...
    def __iter__(self) -> Iterator[Bone]: ...
    def __len__(self) -> int: ...


class ArmaturePoseBones(Sized):
    '''
    Fake class defined as a result of:
    >>> armature.pose.bones
    '''
    active: PoseBone
    def __getitem__(self, key: Any) -> PoseBone: ...
    def __iter__(self) -> Iterator[PoseBone]: ...
    def new(self, name: str) -> PoseBone: ...
    def __len__(self) -> int: ...


class CollectionProperty(Sized, Generic[T]):
    '''
    Fake class for any CollectionProperty.
    '''
    def __getitem__(self, key: Any) -> T: ...
    def __iter__(self) -> Iterator[T]: ...
    def add(self) -> T: ...
    def __contains__(self, key: str) -> bool: ...
    def remove(self, index: int) -> None:
        # TODO: I think there is more overloads for this method.
        ...
    def clear (self) -> None: ...
    def keys(self) -> list[str]: ...
    def move(self, from_index: int, to_index: int) -> None: ...
    def __len__(self) -> int: ...


class DataImages(Sized):
    '''
    Fake class defined as a result of:
    >>> bpy.data.images
    '''
    def __getitem__(self, key: Any) -> Image: ...
    def __iter__(self) -> Iterator[Image]: ...
    def __contains__(self, key: str) -> bool: ...
    def new(
        self, name: str, width: int, height: int, alpha: bool=False) -> Image: ...
    def load(self, filepath: str) -> Image: ...
    def remove(self, image: Image) -> None: ...
    def __len__(self) -> int: ...


class DataMeshes(Sized):
    '''
    Fake class defined as a result of:
    >>> bpy.data.meshes
    '''
    def __getitem__(self, key: Any) -> Mesh: ...
    def __iter__(self) -> Iterator[Mesh]: ...
    def new(self, name: str) -> Mesh: ...
    def remove(self, obj: Mesh) -> None: ...
    def __len__(self) -> int: ...


class DataObjects(Sized):
    '''
    Fake class defined as a result of:
    >>> bpy.data.objects
    '''
    def __getitem__(self, key: Any) -> Object: ...
    def __iter__(self) -> Iterator[Object]: ...
    def new(self, name: str, object_data: Optional[Mesh] = None) -> Object: ...
    def remove(self, obj: Object) -> None: ...
    def __len__(self) -> int: ...


class FCurveKeyframePoints(Sized):
    '''
    Fake class defined as a result of:
    >>> object.keyframe_points
    '''
    def __getitem__(self, key: Any) -> Keyframe: ...
    def __iter__(self) -> Iterator[Keyframe]: ...
    def __len__(self) -> int: ...


class MeshUVLoopLayerData(Sized):
    '''
    Fake class defined as a result of:
    >>> uv_layer.data
    '''
    def __getitem__(self, key: Any) -> MeshUVLoop: ...
    def __iter__(self) -> Iterator[MeshUVLoop]: ...
    def __len__(self) -> int: ...


class NlaTrackNlaStrips(Sized):
    '''
    Fake class defined as a result of:
    >>> object.strips
    '''
    def __getitem__(self, key: Any) -> NlaStrip: ...
    def __iter__(self) -> Iterator[NlaStrip]: ...
    def __len__(self) -> int: ...


class NodeInputs(Sized):
    '''
    Fake class defined as a result of:
    >>> object.inputs
    '''
    def __getitem__(self, key: Any) -> NodeSocket: ...
    def __iter__(self) -> Iterator[NodeSocket]: ...
    def __len__(self) -> int: ...


class NodeOutputs(Sized):
    '''
    Fake class defined as a result of:
    >>> object.outputs
    '''
    def __getitem__(self, key: Any) -> NodeSocket: ...
    def __iter__(self) -> Iterator[NodeSocket]: ...
    def __len__(self) -> int: ...


class NodeTreeInputs(Sized):
    '''
    Fake class defined as a result of:
    >>> object.inputs
    '''
    def __getitem__(self, key: Any) -> NodeSocketInterface: ...
    def __iter__(self) -> Iterator[NodeSocketInterface]: ...
    def new(self, type_: str, name: str) -> NodeSocketInterface: ...
    def __len__(self) -> int: ...


class NodeTreeLinks(Sized):
    '''
    Fake class defined as a result of:
    >>> object.links
    '''
    def __getitem__(self, key: Any) -> NodeLink: ...
    def __iter__(self) -> Iterator[NodeLink]: ...
    def new(self, a: NodeSocket, b: NodeSocket) -> NodeLink: ...
    def __len__(self) -> int: ...


class NodeTreeNodes(Sized):
    '''
    Fake class defined as a result of:
    >>> object.nodes
    '''
    def __getitem__(self, key: Any) -> Node: ...
    def __iter__(self) -> Iterator[Node]: ...
    def new(self, type_: str) -> Node: ...
    def __len__(self) -> int: ...


class NodeTreeOutputs(Sized):
    '''
    Fake class defined as a result of:
    >>> object.outputs
    '''
    def __getitem__(self, key: Any) -> NodeSocketInterface: ...
    def __iter__(self) -> Iterator[NodeSocketInterface]: ...
    def new(self, type_: str, name: str) -> NodeSocketInterface: ...
    def __len__(self) -> int: ...


class ObjectDataEdges(Sized):
    '''
    Fake class defined as a result of:
    >>> object.data.edges
    '''
    def __getitem__(self, key: Any) -> MeshEdge: ...
    def __iter__(self) -> Iterator[MeshEdge]: ...
    def __len__(self) -> int: ...


class ObjectDataMaterials(Sized):
    '''
    Fake class defined as a result of:
    >>> object.data.materials
    '''
    def __getitem__(self, key: Any) -> Material: ...
    def __iter__(self) -> Iterator[Material]: ...
    def append(self, mat: Material) -> None: ...
    def __len__(self) -> int: ...


class ObjectDataPolygons(Sized):
    '''
    Fake class defined as a result of:
    >>> object.data.polygons
    '''
    def __getitem__(self, key: Any) -> MeshPolygon: ...
    def __iter__(self) -> Iterator[MeshPolygon]: ...
    def __len__(self) -> int: ...

class ObjectDataVertices(Sized):
    '''
    Fake class defined as a result of:
    >>> object.data.vertices
    '''
    def __getitem__(self, key: Any) -> MeshVertex: ...
    def __iter__(self) -> Iterator[MeshVertex]: ...
    def __len__(self) -> int: ...


class SceneTimelineMarkers(Sized):
    '''
    Fake class defined as a result of:
    >>> object.timeline_markers
    '''
    def __getitem__(self, key: Any) -> TimelineMarker: ...
    def __iter__(self) -> Iterator[TimelineMarker]: ...
    def __len__(self) -> int: ...
