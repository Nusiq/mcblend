'''
Extra types used only in the PYI files.
'''
from typing import Any, Iterator, TypeVar, Generic, Sized, Optional
from bpy.types import (
    Object, Mesh, Image, Material, Bone, EditBone, MeshUVLoopLayer, PoseBone,
    MeshUVLoop, MeshVertex)

T = TypeVar("T")

class CollectionProperty(Sized, Generic[T]):
    def __getitem__(self, key: Any) -> T:
        ...
    def __iter__(self) -> Iterator[T]:
        ...
    def add(self) -> T:
        ...

    def clear (self) -> None:
        ...

class DataObjects(Sized):
    '''
    Fake class defined as a result of:
    >>> bpy.data.objects
    '''
    def __getitem__(self, key: Any) -> Object: ...
    def __iter__(self) -> Iterator[Object]: ...
    def new(self, name: str, object_data: Optional[Mesh] = None) -> Object: ...
    def remove(self, object: Object) -> None: ...

class DataImages(Sized):
    '''
    Fake class defined as a result of:
    >>> bpy.data.images
    '''
    def __getitem__(self, key: Any) -> Image: ...
    def __iter__(self) -> Iterator[Image]: ...
    def __contains__(self, key: str) -> bool: ...
    def new(
        self, name: str, width: int, height: int, alpha=False) -> Image: ...
    def load(self, filepath: str) -> Image: ...
    def remove(self, image: Image) -> None: ...

class ArmatureDataBones(Sized):
    '''
    Fake class defined as a result of:
    >>> armature.data.bones
    '''
    active: Bone = ...
    def __getitem__(self, key: Any) -> Bone: ...
    def __iter__(self) -> Iterator[Bone]: ...

class ArmatureDataEditBones(Sized):
    '''
    Fake class defined as a result of:
    >>> armature.data.bones
    '''
    active: EditBone = ...
    def __getitem__(self, key: Any) -> EditBone: ...
    def __iter__(self) -> Iterator[EditBone]: ...
    def new(self, name: str) -> EditBone: ...

class ArmaturePoseBones(Sized):
    '''
    Fake class defined as a result of:
    >>> armature.pose.bones
    '''
    active: PoseBone = ...
    def __getitem__(self, key: Any) -> PoseBone: ...
    def __iter__(self) -> Iterator[PoseBone]: ...
    def new(self, name: str) -> PoseBone: ...

class ObjectDataMaterials(Sized):
    '''
    Fake class defined as a result of:
    >>> object.data.materials
    '''
    def __getitem__(self, key: Any) -> Material: ...
    def __iter__(self) -> Iterator[Material]: ...
    def append(self, Material) -> None: ...

class ObjectDataUvLayers(Sized):
    '''
    Fake class defined as a result of:
    >>> object.data.uv_layers
    '''
    active: MeshUVLoopLayer = ...
    def __getitem__(self, key: MeshUVLoopLayer) -> MeshUVLoopLayer: ...
    def __iter__(self) -> Iterator[MeshUVLoopLayer]: ...
    def new(self, name: str) -> MeshUVLoopLayer: ...

class MeshUVLoopLayerData(Sized):
    '''
    Fake class defined as a result of:
    >>> uv_layer.data
    '''
    def __getitem__(self, key: Any) -> MeshUVLoop: ...
    def __iter__(self) -> Iterator[MeshUVLoop]: ...

class ObjectDataVertices(Sized):
    '''
    Fake class defined as a result of:
    >>> object.data.vertices
    '''
    def __getitem__(self, key: Any) -> MeshVertex: ...
    def __iter__(self) -> Iterator[MeshVertex]: ...